/* The following code was generated by JFlex 1.7.0 */

/*
 * Lex file for SmashJass
 */
package net.warsmash.parsers.jass;
import com.etheller.warsmash.util.RawcodeUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SmashJassLexer.flex</tt>
 */
class SmashJassLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\51\1\53\1\53\1\52\22\0\1\47\1\57\1\36"+
    "\1\0\1\43\2\0\1\44\1\62\1\63\1\54\1\2\1\64\1\3"+
    "\1\45\1\50\1\40\11\41\2\0\1\55\1\1\1\56\2\0\6\42"+
    "\24\46\1\60\1\37\1\61\1\0\1\27\1\0\1\10\1\7\1\22"+
    "\1\14\1\12\1\20\1\4\1\25\1\16\1\46\1\23\1\5\1\33"+
    "\1\13\1\6\1\30\1\31\1\24\1\11\1\15\1\21\1\17\1\35"+
    "\1\34\1\26\1\32\12\0\1\53\u1fa2\0\1\53\1\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\21\5\1\1\2\6"+
    "\1\7\1\1\1\10\1\11\1\12\2\13\1\14\1\15"+
    "\1\16\1\1\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\3\5\1\31\23\5\1\32"+
    "\13\5\1\0\1\33\1\0\1\34\1\35\1\0\1\36"+
    "\1\13\1\0\1\37\1\40\1\41\6\5\1\42\1\5"+
    "\1\43\7\5\1\44\30\5\1\0\1\5\1\45\10\5"+
    "\1\46\12\5\1\47\3\5\1\50\1\51\1\52\5\5"+
    "\1\53\1\5\1\54\7\5\1\11\1\5\1\55\3\5"+
    "\1\56\2\5\1\57\7\5\1\60\7\5\1\61\1\5"+
    "\1\62\3\5\1\63\15\5\1\64\1\65\1\66\14\5"+
    "\1\67\7\5\1\70\1\71\1\5\1\72\1\73\1\74"+
    "\1\75\3\5\1\76\7\5\1\77\1\5\1\100\7\5"+
    "\1\101\1\102\1\5\1\103\1\104\3\5\1\105\4\5"+
    "\1\106\1\107\3\5\1\110\1\111\1\112\3\5\1\113"+
    "\2\5\1\114\1\115\1\116\1\5\1\117\1\5\1\120"+
    "\1\121\5\5\1\122\1\123\1\124\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\65\0\u0636"+
    "\0\65\0\u066b\0\u06a0\0\u06d5\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u070a\0\u073f"+
    "\0\u0774\0\u01a8\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2"+
    "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u01a8\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u048e\0\65\0\u0ddf\0\u0e14\0\u0597\0\u0562\0\65"+
    "\0\u0e49\0\u0e7e\0\65\0\65\0\65\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\u0f52\0\u0f87\0\u0fbc\0\u01a8\0\u0ff1\0\u01a8\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb"+
    "\0\u01a8\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e"+
    "\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16"+
    "\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u01a8\0\u1b1f\0\u1b54\0\u1b89"+
    "\0\u01a8\0\u01a8\0\u01a8\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92"+
    "\0\u01a8\0\u1cc7\0\u01a8\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0"+
    "\0\u1e05\0\u1e3a\0\65\0\u1e6f\0\u01a8\0\u1ea4\0\u1ed9\0\u1f0e"+
    "\0\u01a8\0\u1f43\0\u1f78\0\u01a8\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\u20b6\0\u20eb\0\u01a8\0\u2120\0\u2155\0\u218a\0\u21bf"+
    "\0\u21f4\0\u2229\0\u225e\0\u01a8\0\u2293\0\u01a8\0\u22c8\0\u22fd"+
    "\0\u2332\0\u01a8\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470"+
    "\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u01a8"+
    "\0\u01a8\0\u01a8\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721"+
    "\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u01a8\0\u2894"+
    "\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u01a8"+
    "\0\u2a3c\0\u01a8\0\u01a8\0\u01a8\0\u2a71\0\u2aa6\0\u2adb\0\u2b10"+
    "\0\u01a8\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83"+
    "\0\u01a8\0\u2cb8\0\u01a8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1"+
    "\0\u2df6\0\u2e2b\0\u01a8\0\u01a8\0\u2e60\0\u01a8\0\u01a8\0\u2e95"+
    "\0\u2eca\0\u2eff\0\u01a8\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u01a8"+
    "\0\u01a8\0\u3008\0\u303d\0\u3072\0\u01a8\0\u01a8\0\u01a8\0\u30a7"+
    "\0\u30dc\0\u3111\0\u01a8\0\u3146\0\u317b\0\u01a8\0\u01a8\0\u01a8"+
    "\0\u31b0\0\u01a8\0\u31e5\0\u01a8\0\u01a8\0\u321a\0\u324f\0\u3284"+
    "\0\u32b9\0\u32ee\0\u01a8\0\u01a8\0\u01a8\0\u01a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\11"+
    "\1\21\1\22\1\23\1\11\1\24\3\11\1\25\2\11"+
    "\1\26\2\11\1\27\1\2\1\30\1\31\1\11\1\32"+
    "\1\33\1\34\1\11\1\35\1\36\1\37\1\40\1\2"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\66\0\1\52\64\0\1\53\1\54\63\0\1\55"+
    "\1\0\1\56\65\0\1\11\1\57\30\11\2\0\3\11"+
    "\3\0\1\11\22\0\2\11\1\60\7\11\1\61\17\11"+
    "\2\0\3\11\3\0\1\11\22\0\20\11\1\62\3\11"+
    "\1\63\5\11\2\0\3\11\3\0\1\11\22\0\32\11"+
    "\2\0\3\11\3\0\1\11\22\0\7\11\1\64\10\11"+
    "\1\65\11\11\2\0\3\11\3\0\1\11\22\0\6\11"+
    "\1\66\2\11\1\67\4\11\1\70\13\11\2\0\3\11"+
    "\3\0\1\11\22\0\1\11\1\71\5\11\1\72\20\11"+
    "\1\73\1\11\2\0\3\11\3\0\1\11\22\0\2\11"+
    "\1\74\1\11\1\75\1\11\1\76\6\11\1\77\14\11"+
    "\2\0\3\11\3\0\1\11\22\0\6\11\1\100\23\11"+
    "\2\0\3\11\3\0\1\11\22\0\4\11\1\101\13\11"+
    "\1\102\1\103\1\104\7\11\2\0\3\11\3\0\1\11"+
    "\22\0\7\11\1\105\4\11\1\106\12\11\1\107\2\11"+
    "\2\0\3\11\3\0\1\11\22\0\4\11\1\110\10\11"+
    "\1\111\14\11\2\0\3\11\3\0\1\11\22\0\5\11"+
    "\1\112\24\11\2\0\3\11\3\0\1\11\22\0\2\11"+
    "\1\113\1\11\1\114\25\11\2\0\3\11\3\0\1\11"+
    "\22\0\6\11\1\115\23\11\2\0\3\11\3\0\1\11"+
    "\22\0\15\11\1\116\2\11\1\117\11\11\2\0\3\11"+
    "\3\0\1\11\22\0\2\11\1\120\3\11\1\121\23\11"+
    "\2\0\3\11\3\0\1\11\16\0\36\122\1\123\1\124"+
    "\25\122\34\0\1\125\10\0\1\126\57\0\2\31\3\0"+
    "\1\126\57\0\3\32\22\0\44\127\1\130\20\127\40\0"+
    "\2\126\72\0\1\35\65\0\1\131\3\0\1\132\61\0"+
    "\1\37\14\0\1\133\64\0\1\134\64\0\1\135\67\0"+
    "\2\11\1\136\27\11\2\0\3\11\3\0\1\11\22\0"+
    "\2\11\1\137\13\11\1\140\13\11\2\0\3\11\3\0"+
    "\1\11\22\0\3\11\1\141\26\11\2\0\3\11\3\0"+
    "\1\11\22\0\6\11\1\142\2\11\1\143\20\11\2\0"+
    "\3\11\3\0\1\11\22\0\10\11\1\144\21\11\2\0"+
    "\3\11\3\0\1\11\22\0\20\11\1\145\11\11\2\0"+
    "\3\11\3\0\1\11\22\0\11\11\1\146\20\11\2\0"+
    "\3\11\3\0\1\11\22\0\4\11\1\147\13\11\1\150"+
    "\11\11\2\0\3\11\3\0\1\11\22\0\2\11\1\151"+
    "\27\11\2\0\3\11\3\0\1\11\22\0\5\11\1\152"+
    "\24\11\2\0\3\11\3\0\1\11\22\0\10\11\1\153"+
    "\21\11\2\0\3\11\3\0\1\11\22\0\11\11\1\154"+
    "\1\155\17\11\2\0\3\11\3\0\1\11\22\0\11\11"+
    "\1\156\20\11\2\0\3\11\3\0\1\11\22\0\11\11"+
    "\1\157\20\11\2\0\3\11\3\0\1\11\22\0\6\11"+
    "\1\160\23\11\2\0\3\11\3\0\1\11\22\0\1\11"+
    "\1\161\30\11\2\0\3\11\3\0\1\11\22\0\3\11"+
    "\1\162\10\11\1\163\15\11\2\0\3\11\3\0\1\11"+
    "\22\0\17\11\1\164\12\11\2\0\3\11\3\0\1\11"+
    "\22\0\15\11\1\165\14\11\2\0\3\11\3\0\1\11"+
    "\22\0\6\11\1\166\23\11\2\0\3\11\3\0\1\11"+
    "\22\0\24\11\1\167\5\11\2\0\3\11\3\0\1\11"+
    "\22\0\11\11\1\170\1\171\17\11\2\0\3\11\3\0"+
    "\1\11\22\0\24\11\1\172\5\11\2\0\3\11\3\0"+
    "\1\11\22\0\1\11\1\173\30\11\2\0\3\11\3\0"+
    "\1\11\22\0\7\11\1\174\22\11\2\0\3\11\3\0"+
    "\1\11\22\0\6\11\1\175\23\11\2\0\3\11\3\0"+
    "\1\11\22\0\7\11\1\176\22\11\2\0\3\11\3\0"+
    "\1\11\22\0\1\11\1\177\30\11\2\0\3\11\3\0"+
    "\1\11\22\0\4\11\1\200\4\11\1\201\13\11\1\202"+
    "\4\11\2\0\3\11\3\0\1\11\22\0\3\11\1\203"+
    "\26\11\2\0\3\11\3\0\1\11\22\0\12\11\1\204"+
    "\17\11\2\0\3\11\3\0\1\11\22\0\10\11\1\205"+
    "\21\11\2\0\3\11\3\0\1\11\22\0\11\11\1\206"+
    "\20\11\2\0\3\11\3\0\1\11\16\0\65\122\7\0"+
    "\2\125\1\0\1\125\1\0\1\125\3\0\1\125\1\0"+
    "\1\125\15\0\3\125\22\0\51\131\1\37\1\40\1\0"+
    "\11\131\54\132\1\207\10\132\4\0\3\11\1\210\26\11"+
    "\2\0\3\11\3\0\1\11\22\0\24\11\1\211\5\11"+
    "\2\0\3\11\3\0\1\11\22\0\4\11\1\212\25\11"+
    "\2\0\3\11\3\0\1\11\22\0\20\11\1\213\11\11"+
    "\2\0\3\11\3\0\1\11\22\0\20\11\1\214\11\11"+
    "\2\0\3\11\3\0\1\11\22\0\12\11\1\215\17\11"+
    "\2\0\3\11\3\0\1\11\22\0\4\11\1\216\25\11"+
    "\2\0\3\11\3\0\1\11\22\0\11\11\1\217\20\11"+
    "\2\0\3\11\3\0\1\11\22\0\15\11\1\220\14\11"+
    "\2\0\3\11\3\0\1\11\22\0\24\11\1\221\5\11"+
    "\2\0\3\11\3\0\1\11\22\0\6\11\1\222\23\11"+
    "\2\0\3\11\3\0\1\11\22\0\1\223\1\224\3\11"+
    "\1\225\4\11\1\226\1\11\1\227\12\11\1\230\2\11"+
    "\2\0\3\11\3\0\1\11\22\0\6\11\1\231\23\11"+
    "\2\0\3\11\3\0\1\11\22\0\11\11\1\232\20\11"+
    "\2\0\3\11\3\0\1\11\22\0\21\11\1\233\10\11"+
    "\2\0\3\11\3\0\1\11\22\0\12\11\1\234\17\11"+
    "\2\0\3\11\3\0\1\11\22\0\10\11\1\175\21\11"+
    "\2\0\3\11\3\0\1\11\22\0\1\11\1\235\30\11"+
    "\2\0\3\11\3\0\1\11\22\0\15\11\1\236\14\11"+
    "\2\0\3\11\3\0\1\11\22\0\4\11\1\237\25\11"+
    "\2\0\3\11\3\0\1\11\22\0\6\11\1\240\23\11"+
    "\2\0\3\11\3\0\1\11\22\0\6\11\1\241\23\11"+
    "\2\0\3\11\3\0\1\11\22\0\7\11\1\242\22\11"+
    "\2\0\3\11\3\0\1\11\22\0\6\11\1\243\23\11"+
    "\2\0\3\11\3\0\1\11\22\0\6\11\1\244\23\11"+
    "\2\0\3\11\3\0\1\11\22\0\11\11\1\245\20\11"+
    "\2\0\3\11\3\0\1\11\22\0\1\11\1\246\30\11"+
    "\2\0\3\11\3\0\1\11\22\0\5\11\1\247\24\11"+
    "\2\0\3\11\3\0\1\11\22\0\16\11\1\250\13\11"+
    "\2\0\3\11\3\0\1\11\22\0\5\11\1\251\24\11"+
    "\2\0\3\11\3\0\1\11\22\0\5\11\1\252\24\11"+
    "\2\0\3\11\3\0\1\11\22\0\1\11\1\253\30\11"+
    "\2\0\3\11\3\0\1\11\22\0\10\11\1\254\21\11"+
    "\2\0\3\11\3\0\1\11\22\0\15\11\1\255\14\11"+
    "\2\0\3\11\3\0\1\11\22\0\15\11\1\256\14\11"+
    "\2\0\3\11\3\0\1\11\22\0\1\11\1\257\30\11"+
    "\2\0\3\11\3\0\1\11\22\0\13\11\1\260\16\11"+
    "\2\0\3\11\3\0\1\11\22\0\15\11\1\261\14\11"+
    "\2\0\3\11\3\0\1\11\22\0\21\11\1\262\10\11"+
    "\2\0\3\11\3\0\1\11\16\0\50\132\1\263\14\132"+
    "\4\0\4\11\1\264\25\11\2\0\3\11\3\0\1\11"+
    "\22\0\1\11\1\265\30\11\2\0\3\11\3\0\1\11"+
    "\22\0\4\11\1\266\25\11\2\0\3\11\3\0\1\11"+
    "\22\0\4\11\1\267\25\11\2\0\3\11\3\0\1\11"+
    "\22\0\2\11\1\270\27\11\2\0\3\11\3\0\1\11"+
    "\22\0\22\11\1\271\7\11\2\0\3\11\3\0\1\11"+
    "\22\0\12\11\1\272\17\11\2\0\3\11\3\0\1\11"+
    "\22\0\16\11\1\273\13\11\2\0\3\11\3\0\1\11"+
    "\22\0\6\11\1\274\23\11\2\0\3\11\3\0\1\11"+
    "\22\0\12\11\1\275\17\11\2\0\3\11\3\0\1\11"+
    "\22\0\1\11\1\276\30\11\2\0\3\11\3\0\1\11"+
    "\22\0\2\11\1\277\7\11\1\300\17\11\2\0\3\11"+
    "\3\0\1\11\22\0\11\11\1\301\4\11\1\302\13\11"+
    "\2\0\3\11\3\0\1\11\22\0\7\11\1\303\4\11"+
    "\1\304\15\11\2\0\3\11\3\0\1\11\22\0\15\11"+
    "\1\305\14\11\2\0\3\11\3\0\1\11\22\0\2\11"+
    "\1\306\3\11\1\307\23\11\2\0\3\11\3\0\1\11"+
    "\22\0\7\11\1\310\22\11\2\0\3\11\3\0\1\11"+
    "\22\0\31\11\1\311\2\0\3\11\3\0\1\11\22\0"+
    "\12\11\1\312\17\11\2\0\3\11\3\0\1\11\22\0"+
    "\13\11\1\313\16\11\2\0\3\11\3\0\1\11\22\0"+
    "\1\314\31\11\2\0\3\11\3\0\1\11\22\0\15\11"+
    "\1\315\14\11\2\0\3\11\3\0\1\11\22\0\5\11"+
    "\1\316\24\11\2\0\3\11\3\0\1\11\22\0\20\11"+
    "\1\317\11\11\2\0\3\11\3\0\1\11\22\0\12\11"+
    "\1\320\17\11\2\0\3\11\3\0\1\11\22\0\6\11"+
    "\1\321\23\11\2\0\3\11\3\0\1\11\22\0\6\11"+
    "\1\322\23\11\2\0\3\11\3\0\1\11\22\0\11\11"+
    "\1\323\20\11\2\0\3\11\3\0\1\11\22\0\11\11"+
    "\1\324\20\11\2\0\3\11\3\0\1\11\22\0\2\11"+
    "\1\325\27\11\2\0\3\11\3\0\1\11\22\0\20\11"+
    "\1\326\11\11\2\0\3\11\3\0\1\11\22\0\12\11"+
    "\1\327\17\11\2\0\3\11\3\0\1\11\22\0\12\11"+
    "\1\330\17\11\2\0\3\11\3\0\1\11\22\0\4\11"+
    "\1\331\25\11\2\0\3\11\3\0\1\11\22\0\1\11"+
    "\1\332\30\11\2\0\3\11\3\0\1\11\22\0\2\11"+
    "\1\333\27\11\2\0\3\11\3\0\1\11\22\0\1\11"+
    "\1\334\30\11\2\0\3\11\3\0\1\11\22\0\20\11"+
    "\1\335\11\11\2\0\3\11\3\0\1\11\22\0\11\11"+
    "\1\336\20\11\2\0\3\11\3\0\1\11\22\0\7\11"+
    "\1\337\22\11\2\0\3\11\3\0\1\11\22\0\16\11"+
    "\1\340\13\11\2\0\3\11\3\0\1\11\22\0\11\11"+
    "\1\341\20\11\2\0\3\11\3\0\1\11\22\0\14\11"+
    "\1\342\15\11\2\0\3\11\3\0\1\11\22\0\2\11"+
    "\1\343\27\11\2\0\3\11\3\0\1\11\22\0\2\11"+
    "\1\344\27\11\2\0\3\11\3\0\1\11\22\0\3\11"+
    "\1\345\26\11\2\0\3\11\3\0\1\11\22\0\20\11"+
    "\1\346\11\11\2\0\3\11\3\0\1\11\22\0\2\11"+
    "\1\347\27\11\2\0\3\11\3\0\1\11\22\0\11\11"+
    "\1\350\20\11\2\0\3\11\3\0\1\11\22\0\7\11"+
    "\1\351\22\11\2\0\3\11\3\0\1\11\22\0\10\11"+
    "\1\352\21\11\2\0\3\11\3\0\1\11\22\0\11\11"+
    "\1\353\20\11\2\0\3\11\3\0\1\11\22\0\10\11"+
    "\1\354\21\11\2\0\3\11\3\0\1\11\22\0\21\11"+
    "\1\355\10\11\2\0\3\11\3\0\1\11\22\0\7\11"+
    "\1\356\22\11\2\0\3\11\3\0\1\11\22\0\6\11"+
    "\1\357\23\11\2\0\3\11\3\0\1\11\22\0\1\11"+
    "\1\360\30\11\2\0\3\11\3\0\1\11\22\0\14\11"+
    "\1\361\15\11\2\0\3\11\3\0\1\11\22\0\4\11"+
    "\1\362\25\11\2\0\3\11\3\0\1\11\22\0\27\11"+
    "\1\363\2\11\2\0\3\11\3\0\1\11\22\0\12\11"+
    "\1\364\17\11\2\0\3\11\3\0\1\11\22\0\4\11"+
    "\1\365\25\11\2\0\3\11\3\0\1\11\22\0\7\11"+
    "\1\366\22\11\2\0\3\11\3\0\1\11\22\0\7\11"+
    "\1\367\22\11\2\0\3\11\3\0\1\11\22\0\20\11"+
    "\1\112\11\11\2\0\3\11\3\0\1\11\22\0\16\11"+
    "\1\370\13\11\2\0\3\11\3\0\1\11\22\0\11\11"+
    "\1\371\20\11\2\0\3\11\3\0\1\11\22\0\6\11"+
    "\1\372\23\11\2\0\3\11\3\0\1\11\22\0\10\11"+
    "\1\373\21\11\2\0\3\11\3\0\1\11\22\0\5\11"+
    "\1\374\24\11\2\0\3\11\3\0\1\11\22\0\22\11"+
    "\1\375\7\11\2\0\3\11\3\0\1\11\22\0\2\11"+
    "\1\376\27\11\2\0\3\11\3\0\1\11\22\0\4\11"+
    "\1\377\25\11\2\0\3\11\3\0\1\11\22\0\3\11"+
    "\1\u0100\26\11\2\0\3\11\3\0\1\11\22\0\24\11"+
    "\1\u0101\5\11\2\0\3\11\3\0\1\11\22\0\20\11"+
    "\1\u0102\11\11\2\0\3\11\3\0\1\11\22\0\15\11"+
    "\1\u0103\14\11\2\0\3\11\3\0\1\11\22\0\24\11"+
    "\1\u0104\5\11\2\0\3\11\3\0\1\11\22\0\6\11"+
    "\1\u0105\23\11\2\0\3\11\3\0\1\11\22\0\16\11"+
    "\1\u0106\13\11\2\0\3\11\3\0\1\11\22\0\15\11"+
    "\1\u0107\14\11\2\0\3\11\3\0\1\11\22\0\21\11"+
    "\1\u0108\10\11\2\0\3\11\3\0\1\11\22\0\5\11"+
    "\1\u0109\24\11\2\0\3\11\3\0\1\11\22\0\6\11"+
    "\1\u010a\23\11\2\0\3\11\3\0\1\11\22\0\1\u010b"+
    "\31\11\2\0\3\11\3\0\1\11\22\0\11\11\1\u010c"+
    "\20\11\2\0\3\11\3\0\1\11\22\0\4\11\1\u010d"+
    "\25\11\2\0\3\11\3\0\1\11\22\0\1\11\1\u010e"+
    "\30\11\2\0\3\11\3\0\1\11\22\0\6\11\1\u010f"+
    "\23\11\2\0\3\11\3\0\1\11\22\0\2\11\1\u0110"+
    "\27\11\2\0\3\11\3\0\1\11\22\0\7\11\1\u0111"+
    "\22\11\2\0\3\11\3\0\1\11\22\0\1\11\1\u0112"+
    "\30\11\2\0\3\11\3\0\1\11\22\0\5\11\1\u0113"+
    "\24\11\2\0\3\11\3\0\1\11\22\0\6\11\1\u0114"+
    "\23\11\2\0\3\11\3\0\1\11\22\0\23\11\1\u0115"+
    "\6\11\2\0\3\11\3\0\1\11\22\0\20\11\1\u0116"+
    "\11\11\2\0\3\11\3\0\1\11\22\0\1\11\1\u0117"+
    "\30\11\2\0\3\11\3\0\1\11\22\0\4\11\1\u0118"+
    "\25\11\2\0\3\11\3\0\1\11\22\0\4\11\1\u0119"+
    "\25\11\2\0\3\11\3\0\1\11\22\0\16\11\1\u011a"+
    "\13\11\2\0\3\11\3\0\1\11\22\0\6\11\1\u011b"+
    "\23\11\2\0\3\11\3\0\1\11\22\0\20\11\1\u011c"+
    "\11\11\2\0\3\11\3\0\1\11\22\0\11\11\1\u011d"+
    "\20\11\2\0\3\11\3\0\1\11\22\0\1\11\1\u011e"+
    "\30\11\2\0\3\11\3\0\1\11\22\0\2\11\1\u011f"+
    "\27\11\2\0\3\11\3\0\1\11\22\0\7\11\1\u0120"+
    "\22\11\2\0\3\11\3\0\1\11\22\0\5\11\1\u0121"+
    "\24\11\2\0\3\11\3\0\1\11\22\0\16\11\1\u0122"+
    "\13\11\2\0\3\11\3\0\1\11\22\0\12\11\1\u0123"+
    "\17\11\2\0\3\11\3\0\1\11\22\0\7\11\1\u0124"+
    "\22\11\2\0\3\11\3\0\1\11\22\0\7\11\1\u0125"+
    "\22\11\2\0\3\11\3\0\1\11\22\0\11\11\1\u0126"+
    "\20\11\2\0\3\11\3\0\1\11\22\0\22\11\1\u0127"+
    "\7\11\2\0\3\11\3\0\1\11\22\0\2\11\1\u0128"+
    "\27\11\2\0\3\11\3\0\1\11\22\0\1\11\1\u0129"+
    "\30\11\2\0\3\11\3\0\1\11\22\0\20\11\1\u012a"+
    "\11\11\2\0\3\11\3\0\1\11\22\0\11\11\1\u012b"+
    "\20\11\2\0\3\11\3\0\1\11\22\0\14\11\1\u012c"+
    "\15\11\2\0\3\11\3\0\1\11\22\0\12\11\1\u012d"+
    "\17\11\2\0\3\11\3\0\1\11\22\0\6\11\1\u012e"+
    "\23\11\2\0\3\11\3\0\1\11\22\0\10\11\1\u012f"+
    "\21\11\2\0\3\11\3\0\1\11\22\0\6\11\1\u0130"+
    "\23\11\2\0\3\11\3\0\1\11\22\0\26\11\1\u0131"+
    "\3\11\2\0\3\11\3\0\1\11\22\0\11\11\1\u0132"+
    "\20\11\2\0\3\11\3\0\1\11\22\0\7\11\1\u0133"+
    "\22\11\2\0\3\11\3\0\1\11\22\0\5\11\1\u0134"+
    "\24\11\2\0\3\11\3\0\1\11\22\0\22\11\1\u0135"+
    "\7\11\2\0\3\11\3\0\1\11\22\0\4\11\1\u0136"+
    "\25\11\2\0\3\11\3\0\1\11\22\0\2\11\1\u0137"+
    "\27\11\2\0\3\11\3\0\1\11\22\0\6\11\1\u0138"+
    "\23\11\2\0\3\11\3\0\1\11\22\0\16\11\1\u0139"+
    "\13\11\2\0\3\11\3\0\1\11\22\0\16\11\1\u013a"+
    "\13\11\2\0\3\11\3\0\1\11\22\0\7\11\1\u013b"+
    "\22\11\2\0\3\11\3\0\1\11\22\0\20\11\1\u013c"+
    "\11\11\2\0\3\11\3\0\1\11\22\0\6\11\1\u013d"+
    "\23\11\2\0\3\11\3\0\1\11\22\0\6\11\1\u013e"+
    "\23\11\2\0\3\11\3\0\1\11\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13091];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\1\11\1\1\1\11\3\1\12\11"+
    "\43\1\1\0\1\11\1\0\2\1\1\0\1\11\1\1"+
    "\1\0\3\11\51\1\1\0\53\1\1\11\213\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	private Object yylval;
	public Object getLVal() {
		return yylval;
	}
	
	public int getLine() {
		return yyline;
	}
	
	public int getColumn() {
		return yycolumn;
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SmashJassLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new IllegalStateException((getLine()+1) + ":" + getColumn() +": Unexpected character '" + yytext() + "'");
            } 
            // fall through
          case 86: break;
          case 2: 
            { return SmashJassParser.Lexer.EQUALS;
            } 
            // fall through
          case 87: break;
          case 3: 
            { return SmashJassParser.Lexer.PLUS;
            } 
            // fall through
          case 88: break;
          case 4: 
            { return SmashJassParser.Lexer.MINUS;
            } 
            // fall through
          case 89: break;
          case 5: 
            { yylval = yytext();
	return SmashJassParser.Lexer.ID;
            } 
            // fall through
          case 90: break;
          case 6: 
            { yylval = (int) Long.parseLong(yytext());
	return SmashJassParser.Lexer.INTEGER;
            } 
            // fall through
          case 91: break;
          case 7: 
            { yylval = Integer.parseInt(yytext().substring(1), 16);
	return SmashJassParser.Lexer.DOLLAR_HEX_CONSTANT;
            } 
            // fall through
          case 92: break;
          case 8: 
            { return SmashJassParser.Lexer.DOT;
            } 
            // fall through
          case 93: break;
          case 9: 
            { /* skip this */
            } 
            // fall through
          case 94: break;
          case 10: 
            { return SmashJassParser.Lexer.DIVIDE;
            } 
            // fall through
          case 95: break;
          case 11: 
            { return SmashJassParser.Lexer.NEWLINE;
            } 
            // fall through
          case 96: break;
          case 12: 
            { return SmashJassParser.Lexer.TIMES;
            } 
            // fall through
          case 97: break;
          case 13: 
            { return SmashJassParser.Lexer.LESS;
            } 
            // fall through
          case 98: break;
          case 14: 
            { return SmashJassParser.Lexer.GREATER;
            } 
            // fall through
          case 99: break;
          case 15: 
            { return SmashJassParser.Lexer.OPEN_BRACKET;
            } 
            // fall through
          case 100: break;
          case 16: 
            { return SmashJassParser.Lexer.CLOSE_BRACKET;
            } 
            // fall through
          case 101: break;
          case 17: 
            { return SmashJassParser.Lexer.OPEN_PAREN;
            } 
            // fall through
          case 102: break;
          case 18: 
            { return SmashJassParser.Lexer.CLOSE_PAREN;
            } 
            // fall through
          case 103: break;
          case 19: 
            { return SmashJassParser.Lexer.COMMA;
            } 
            // fall through
          case 104: break;
          case 20: 
            { return SmashJassParser.Lexer.DOUBLE_EQUALS;
            } 
            // fall through
          case 105: break;
          case 21: 
            { return SmashJassParser.Lexer.PLUSEQUALS;
            } 
            // fall through
          case 106: break;
          case 22: 
            { return SmashJassParser.Lexer.PLUSPLUS;
            } 
            // fall through
          case 107: break;
          case 23: 
            { return SmashJassParser.Lexer.MINUSEQUALS;
            } 
            // fall through
          case 108: break;
          case 24: 
            { return SmashJassParser.Lexer.MINUSMINUS;
            } 
            // fall through
          case 109: break;
          case 25: 
            { return SmashJassParser.Lexer.OR;
            } 
            // fall through
          case 110: break;
          case 26: 
            { return SmashJassParser.Lexer.IF;
            } 
            // fall through
          case 111: break;
          case 27: 
            { final String stringLiteralText = yytext();
	final String parsedString = stringLiteralText.substring(1, stringLiteralText.length() - 1).replace("\\\\", "\\");
	yylval = parsedString;
	return SmashJassParser.Lexer.STRING_LITERAL;
            } 
            // fall through
          case 112: break;
          case 28: 
            { yylval = (int) (Long.parseLong(yytext().substring(2), 16) & 0xFFFFFFFF);
	return SmashJassParser.Lexer.HEX_CONSTANT;
            } 
            // fall through
          case 113: break;
          case 29: 
            { yylval = Double.parseDouble(yytext());
	return SmashJassParser.Lexer.REAL;
            } 
            // fall through
          case 114: break;
          case 30: 
            { final String stringLiteralText = yytext();
	String parsedString = stringLiteralText.substring(1, stringLiteralText.length() - 1).replace("\\\\", "\\");
	while (parsedString.length() < 4) {
		parsedString += '\0';
	}
	yylval = RawcodeUtils.toInt(parsedString);
	return SmashJassParser.Lexer.RAWCODE;
            } 
            // fall through
          case 115: break;
          case 31: 
            { return SmashJassParser.Lexer.LESS_EQUALS;
            } 
            // fall through
          case 116: break;
          case 32: 
            { return SmashJassParser.Lexer.GREATER_EQUALS;
            } 
            // fall through
          case 117: break;
          case 33: 
            { return SmashJassParser.Lexer.NOT_EQUALS;
            } 
            // fall through
          case 118: break;
          case 34: 
            { return SmashJassParser.Lexer.AND;
            } 
            // fall through
          case 119: break;
          case 35: 
            { return SmashJassParser.Lexer.SET;
            } 
            // fall through
          case 120: break;
          case 36: 
            { return SmashJassParser.Lexer.NOT;
            } 
            // fall through
          case 121: break;
          case 37: 
            { return SmashJassParser.Lexer.LOOP;
            } 
            // fall through
          case 122: break;
          case 38: 
            { return SmashJassParser.Lexer.ELSE;
            } 
            // fall through
          case 123: break;
          case 39: 
            { return SmashJassParser.Lexer.NULL;
            } 
            // fall through
          case 124: break;
          case 40: 
            { return SmashJassParser.Lexer.TRUE;
            } 
            // fall through
          case 125: break;
          case 41: 
            { return SmashJassParser.Lexer.THEN;
            } 
            // fall through
          case 126: break;
          case 42: 
            { return SmashJassParser.Lexer.TYPE;
            } 
            // fall through
          case 127: break;
          case 43: 
            { return SmashJassParser.Lexer.REQUIRES;
            } 
            // fall through
          case 128: break;
          case 44: 
            { return SmashJassParser.Lexer.CALL;
            } 
            // fall through
          case 129: break;
          case 45: 
            { return SmashJassParser.Lexer.LOCAL;
            } 
            // fall through
          case 130: break;
          case 46: 
            { return SmashJassParser.Lexer.ARRAY;
            } 
            // fall through
          case 131: break;
          case 47: 
            { return SmashJassParser.Lexer.SCOPE;
            } 
            // fall through
          case 132: break;
          case 48: 
            { return SmashJassParser.Lexer.ENDIF;
            } 
            // fall through
          case 133: break;
          case 49: 
            { return SmashJassParser.Lexer.DEBUG;
            } 
            // fall through
          case 134: break;
          case 50: 
            { return SmashJassParser.Lexer.TAKES;
            } 
            // fall through
          case 135: break;
          case 51: 
            { return SmashJassParser.Lexer.FALSE;
            } 
            // fall through
          case 136: break;
          case 52: 
            { return SmashJassParser.Lexer.STATIC;
            } 
            // fall through
          case 137: break;
          case 53: 
            { return SmashJassParser.Lexer.STRUCT;
            } 
            // fall through
          case 138: break;
          case 54: 
            { return SmashJassParser.Lexer.ELSEIF;
            } 
            // fall through
          case 139: break;
          case 55: 
            { return SmashJassParser.Lexer.NATIVE;
            } 
            // fall through
          case 140: break;
          case 56: 
            { return SmashJassParser.Lexer.RETURN;
            } 
            // fall through
          case 141: break;
          case 57: 
            { return SmashJassParser.Lexer.PUBLIC;
            } 
            // fall through
          case 142: break;
          case 58: 
            { return SmashJassParser.Lexer.MODULE;
            } 
            // fall through
          case 143: break;
          case 59: 
            { return SmashJassParser.Lexer.METHOD;
            } 
            // fall through
          case 144: break;
          case 60: 
            { return SmashJassParser.Lexer.GLOBALS;
            } 
            // fall through
          case 145: break;
          case 61: 
            { return SmashJassParser.Lexer.LIBRARY;
            } 
            // fall through
          case 146: break;
          case 62: 
            { return SmashJassParser.Lexer.ENDLOOP;
            } 
            // fall through
          case 147: break;
          case 63: 
            { return SmashJassParser.Lexer.EXTENDS;
            } 
            // fall through
          case 148: break;
          case 64: 
            { return SmashJassParser.Lexer.NOTHING;
            } 
            // fall through
          case 149: break;
          case 65: 
            { return SmashJassParser.Lexer.RETURNS;
            } 
            // fall through
          case 150: break;
          case 66: 
            { return SmashJassParser.Lexer.PRIVATE;
            } 
            // fall through
          case 151: break;
          case 67: 
            { return SmashJassParser.Lexer.OPERATOR;
            } 
            // fall through
          case 152: break;
          case 68: 
            { return SmashJassParser.Lexer.OPTIONAL;
            } 
            // fall through
          case 153: break;
          case 69: 
            { return SmashJassParser.Lexer.ENDSCOPE;
            } 
            // fall through
          case 154: break;
          case 70: 
            { return SmashJassParser.Lexer.EXITWHEN;
            } 
            // fall through
          case 155: break;
          case 71: 
            { return SmashJassParser.Lexer.DEFAULTS;
            } 
            // fall through
          case 156: break;
          case 72: 
            { return SmashJassParser.Lexer.FUNCTION;
            } 
            // fall through
          case 157: break;
          case 73: 
            { return SmashJassParser.Lexer.CONSTANT;
            } 
            // fall through
          case 158: break;
          case 74: 
            { return SmashJassParser.Lexer.READONLY;
            } 
            // fall through
          case 159: break;
          case 75: 
            { return SmashJassParser.Lexer.ENDSTRUCT;
            } 
            // fall through
          case 160: break;
          case 76: 
            { return SmashJassParser.Lexer.ENDMODULE;
            } 
            // fall through
          case 161: break;
          case 77: 
            { return SmashJassParser.Lexer.ENDMETHOD;
            } 
            // fall through
          case 162: break;
          case 78: 
            { return SmashJassParser.Lexer.INTERFACE;
            } 
            // fall through
          case 163: break;
          case 79: 
            { return SmashJassParser.Lexer.IMPLEMENT;
            } 
            // fall through
          case 164: break;
          case 80: 
            { return SmashJassParser.Lexer.ENDGLOBALS;
            } 
            // fall through
          case 165: break;
          case 81: 
            { return SmashJassParser.Lexer.ENDLIBRARY;
            } 
            // fall through
          case 166: break;
          case 82: 
            { return SmashJassParser.Lexer.ENDFUNCTION;
            } 
            // fall through
          case 167: break;
          case 83: 
            { return SmashJassParser.Lexer.INITIALIZER;
            } 
            // fall through
          case 168: break;
          case 84: 
            { return SmashJassParser.Lexer.LIBRARY_ONCE;
            } 
            // fall through
          case 169: break;
          case 85: 
            { return SmashJassParser.Lexer.ENDINTERFACE;
            } 
            // fall through
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
